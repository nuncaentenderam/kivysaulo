from kivy.app import App
from kivy.uix.boxlayout import BoxLayout
from kivy.uix.textinput import TextInput
from kivy.uix.button import Button
from kivy.uix.label import Label
from kivy.uix.scrollview import ScrollView
from kivy.core.window import Window
from kivy.graphics import Color, Rectangle, RoundedRectangle, Line

Window.size = (800, 600)

class BackgroundBoxLayout(BoxLayout):
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        with self.canvas.before:
            Color(0.95, 0.95, 0.95, 1)
            self.rect = Rectangle(size=self.size, pos=self.pos)
        self.bind(size=self.update_rect, pos=self.update_rect)

    def update_rect(self, *args):
        self.rect.size = self.size
        self.rect.pos = self.pos

class TaskBox(BoxLayout):
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        with self.canvas.before:
            Color(1, 1, 1, 1)
            self.rect = RoundedRectangle(size=self.size, pos=self.pos, radius=[10])
            Color(0, 0, 0, 1)
            self.border = Line(width=2, close=True)
        self.bind(size=self.update_rect, pos=self.update_rect)

    def update_rect(self, *args):
        self.rect.size = self.size
        self.rect.pos = self.pos
        self.border.points = [self.x, self.y,
                              self.x + self.width, self.y,
                              self.x + self.width, self.y + self.height,
                              self.x, self.y + self.height,
                              self.x, self.y]

class ToDoApp(App):
    def build(self):
        self.root_layout = BackgroundBoxLayout(orientation='vertical', padding=10, spacing=10)

        main_layout = BoxLayout(orientation='horizontal', spacing=10, size_hint_y=None, height=600)
        main_layout.bind(minimum_height=main_layout.setter('height'))

        input_layout = BoxLayout(orientation='vertical', spacing=10, size_hint_x=0.5)

        self.task_input = TextInput(hint_text='Digite uma nova tarefa', multiline=False, size_hint_y=None, height=50)
        self.task_input.background_color = (0.9, 0.9, 0.9, 1)
        input_layout.add_widget(self.task_input)

        self.date_input = TextInput(hint_text='Digite a data (dd/mm/yyyy)', multiline=False, size_hint_y=None, height=50)
        self.date_input.background_color = (0.9, 0.9, 0.9, 1)
        input_layout.add_widget(self.date_input)

        self.time_input = TextInput(hint_text='Digite o horário limite (hh:mm)', multiline=False, size_hint_y=None, height=50)
        self.time_input.background_color = (0.9, 0.9, 0.9, 1)
        input_layout.add_widget(self.time_input)

        add_button = Button(text="Adicionar Tarefa", size_hint_y=None, height=50)
        add_button.background_color = (0.5, 0.8, 0.9, 1)
        add_button.bind(on_press=self.add_task)
        input_layout.add_widget(add_button)

        title_label = Label(text="Tarefas", font_size='20sp', size_hint_y=None, height=40, color=(0.2, 0.2, 0.2, 1))
        input_layout.add_widget(title_label)

        self.scroll_view = ScrollView(size_hint=(1, None), size=(400, 300))
        self.tasks_layout = BoxLayout(orientation='vertical', spacing=10, size_hint_y=None)
        self.tasks_layout.bind(minimum_height=self.tasks_layout.setter('height'))

        self.scroll_view.add_widget(self.tasks_layout)
        input_layout.add_widget(self.scroll_view)

        specs_layout = BoxLayout(orientation='vertical', spacing=10, size_hint_x=0.5)

        self.professor_input = TextInput(hint_text='Digite o nome do Professor', multiline=False, size_hint_y=None, height=50)
        self.professor_input.background_color = (0.9, 0.9, 0.9, 1)
        specs_layout.add_widget(self.professor_input)

        self.materia_input = TextInput(hint_text='Digite a Matéria', multiline=False, size_hint_y=None, height=50)
        self.materia_input.background_color = (0.9, 0.9, 0.9, 1)
        specs_layout.add_widget(self.materia_input)

        add_specs_button = Button(text="Adicionar Especificação", size_hint_y=None, height=50)
        add_specs_button.background_color = (0.5, 0.8, 0.9, 1)
        add_specs_button.bind(on_press=self.add_specification)
        specs_layout.add_widget(add_specs_button)

        specs_title_label = Label(text="Especificações", font_size='20sp', size_hint_y=None, height=40, color=(0.2, 0.2, 0.2, 1))
        specs_layout.add_widget(specs_title_label)

        self.specs_scroll_view = ScrollView(size_hint=(1, None), size=(400, 300))
        self.specs_layout = BoxLayout(orientation='vertical', spacing=10, size_hint_y=None)
        self.specs_layout.bind(minimum_height=self.specs_layout.setter('height'))

        self.specs_scroll_view.add_widget(self.specs_layout)
        specs_layout.add_widget(self.specs_scroll_view)

        main_layout.add_widget(input_layout)
        main_layout.add_widget(specs_layout)

        self.root_layout.add_widget(main_layout)

        return self.root_layout

    def add_task(self, instance):
        task_text = self.task_input.text.strip()
        date_text = self.date_input.text.strip()
        time_text = self.time_input.text.strip()

        if task_text and date_text and time_text:
            task_box = TaskBox(orientation='vertical', size_hint_y=None, height=100, padding=10, spacing=5)

            task_label = Label(text=f"Tarefa: {task_text}", size_hint_x=1, color=(0.2, 0.2, 0.2, 1))
            date_label = Label(text=f"Data: {date_text} - Hora: {time_text}", size_hint_x=1, color=(0.2, 0.2, 0.2, 1))
            task_box.add_widget(task_label)
            task_box.add_widget(date_label)

            remove_button = Button(text="Remover", size_hint_y=None, height=30)
            remove_button.background_color = (0.9, 0.6, 0.6, 1)
            remove_button.bind(on_press=lambda x: self.remove_task(task_box))
            task_box.add_widget(remove_button)

            self.tasks_layout.add_widget(task_box)

            self.task_input.text = ''
            self.date_input.text = ''
            self.time_input.text = ''

    def add_specification(self, instance):
        professor_text = self.professor_input.text.strip()
        materia_text = self.materia_input.text.strip()

        if professor_text and materia_text:
            specs_box = TaskBox(orientation='vertical', size_hint_y=None, height=100, padding=10, spacing=5)

            specs_label = Label(text=f"Professor: {professor_text} - Matéria: {materia_text}", size_hint_x=1, color=(0.2, 0.2, 0.2, 1))
            specs_box.add_widget(specs_label)

            remove_button = Button(text="Remover", size_hint_y=None, height=30)
            remove_button.background_color = (0.9, 0.6, 0.6, 1)
            remove_button.bind(on_press=lambda x: self.remove_specification(specs_box))
            specs_box.add_widget(remove_button)

            self.specs_layout.add_widget(specs_box)

            self.professor_input.text = ''
            self.materia_input.text = ''

    def remove_task(self, task_box):
        self.tasks_layout.remove_widget(task_box)

    def remove_specification(self, specs_box):
        self.specs_layout.remove_widget(specs_box)

if __name__ == '__main__':
    ToDoApp().run()
